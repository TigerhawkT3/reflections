There are many reasons for creating a remote repository rather than keeping everything local.
First, the remote repository can serve as a backup in case I lose my local files. Second, I
can work on the project while I'm away from my main computer. Third, the remote repository
can serve as a "known good" snapshot, with production-ready commits. Fourth, a remote repository
like GitHub allows multiple users to remotely collaborate on a project.

I would want to always pull changes manually rather than having Git automatically stay
up-to-date with my remote repository for the same reason I want to make manual commits: for
more control over any changes. Maybe someone pushed a commit that broke something - I wouldn't
want to open the project locally and find that changes from an automatic pull are causing problems.

Forking a repository on GitHub clones it and places the clone into your control. I would do this
when I wanted to modify someone else's repository with my own changes or additions. Cloning makes
a copy of a repository. I would do this when I wanted to move a remote repository's files onto my
local machine. Branches allow me to split a repository off into a new version. I would do this when
I wanted to experiment with things that might break something, or when I wanted to created unique
versions of my project (as with the easy-mode Asteroids branch).

The benefit of having a copy of the last known state of the remote stored locally is that it allows
you to diff your local work against a reliable state, which can help you keep track of the changes
you've made.

Without using Git or GitHub, I would collaborate by sending emails to all participants in a project
with a zip file of the latest files. With Git and GitHub, I would collaborate by maintaining a
repository on GitHub and pushing commits with every significant change. The former method would be
easier to learn and introduce to several people for a short-term project, but the latter would be
better suited to larger projects (more contributors, contributors who may not know each other, more
files, bigger files, etc.).

Even with the complexity of managing multiple branches in a remote, public repository, the same reasons
for making changes in separate branches still apply. It allows you to make experimental or divergent
changes, like bug fixes, new features, or translated versions, without impacting development on the
main, stable branch. Making changes directly to master may be preferable if one wishes to avoid dealing
with branches and merge conflicts, but that sort of defeats the purpose of using version control.