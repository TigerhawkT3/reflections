When I initialized a repository, it turned that folder into a repository containing its
files and folders at the time. I needed to do it to be able to track these reflection
files with Git version control.

The staging area differs from the working directory and the repository in that it is
merely a list of which files from the working directory will be committed to the
repository. It is valuable for the way it allows me to create a "rough draft" of a
commit before pushing it to the repository.

I can use the staging area to make sure I have one commit per logical change by
running git diff --staged to compare the staging area to the latest commit and
looking over the differences.

Branches would be helpful in keeping my history organized in situations where I want
to try out a new feature, attempt a refactor, or just play around with new things.
I could create a branch to add, for example, online play to a chess game. If this
feature introduced security issues, I could abandon that branch without affecting
the main branch. On the other hand, if it worked out, I could merge it with the
main branch to add the feature without having to manually roll in any other
fixes or updates that I was working on in the meantime.

Diagrams help me visualize the branch structure by identifying where each branch
splits off from the master branch and providing a clear path back to each branch's
parent commit.

The result of merging two branches together was that all the changes from both
branches were incorporated into the checked out branch (master in this case).
We represent it in the diagram the way we do because the change for coins was
kept separate from the master, and then later it was brought back, with all the
other changes to the master present as well.